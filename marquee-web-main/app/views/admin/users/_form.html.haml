
= form_for([:admin, @user]) do |f|
  %fieldset
    %legend= title
    .clearfix
      = f.label :email
      .input
        = f.text_field :email, :disabled => @user.email.empty? ? false : true, :class => "validate[required,custom[email]]"
    .clearfix
      = f.label :display_name
      .input
        = f.text_field :display_name
    - if @user.email.empty?
      .clearfix
        = f.label :password
        .input
          = f.password_field :password, :class => "validate[required]"
      .clearfix
        = f.label :confirm_password
        .input
          %input{:id => "confirm_password", :type => "password", :class => "validate[required,equals[user_password]]"}
    .clearfix
      = f.label :time_card_project_permissions
      .input
        .row
          .columns.span7
            %select.as-select#tcpps{:multiple => 'multiple'}
              - OracleProject.all.reject{|pn| @user.oracle_projects.include?(pn)}.each do |pn|
                %option{:value => pn.id}= pn.name
            %a#add-all-button
              %span.multi-select-item-add.ui-icon
              Choose All
          .columns.span1#drag-arrow
            %a.multi-select-item-add.ui-icon#add-button
            .clearfix
            %a.multi-select-item-remove.ui-icon#remove-button
          .columns.span7
            %select.as-select#tcpps-selected{:multiple => 'multiple'}
              - @user.oracle_projects.each do |pn|
                %option{:value => pn.id}= pn.name
            %a#clear-all-button
              %span.multi-select-item-remove.ui-icon
              Clear All
            = hidden_field_tag "user[oracle_project_ids][]", ""
          #tcpp-ids
    .clearfix
      - val_uad = ""
      - if not(@user.user_ability_definitions.nil?) and not(@user.user_ability_definitions.empty?)
        - @user.user_ability_definitions.each do |uad|
          - val_uad += "||Can #{uad.ability} #{uad.resource}"
      = f.text_area :user_ability_definitions, {:value => val_uad}
      - val_upr = ""
      - if not(@user.projects_roles.nil?) and not (@user.projects_roles.empty?)
        - @user.projects_roles.each do |upr|
          - val_upr += "||#{upr.role_id},#{upr.project_id.nil? ? 0 : upr.project_id}"
      = f.text_area :projects_roles, {:value => val_upr}
    .clearfix
      %label Select roles
      .input
        = select_tag "upr roles", options_from_collection_for_select(Role.all, :id, :name), :id => "upr_role", :class => "roles chzn-select"
        = select_tag "upr projects", options_from_collection_for_select(Project.all, :id, :name), :id => "upr_project", :class => "roles chzn-select", :prompt => "All"
        = link_to 'Add', '#', :class => 'btn user-projects-roles', :id => 'add_upr_btn'
        %table.project_role
          %tr
            %th Roles In Projects
            %th
            %th
          %tr#hidden_upr
            %td
              To be cloned
            %td 
              To be cloned
            %td#hidden
              To be cloned
            %td
              %a{:class => "delete_upr", :href => "#"}
                %img{:src => asset_path("cross-hover.png")}
          - if @user.projects_roles.nil? or @user.projects_roles.empty?
            %tr.no-tata
              %td{:colspan => 3}
                %h4 No Role Defined
          - else
            - @user.projects_roles.each do |pr|
              %tr.data-list
                %td= pr.role.name
                %td= pr.project ? pr.project.name : "All"
                %td#hidden= "||#{pr.role.id},#{pr.project ? pr.project.id : 0}"
                %td
                  %a{:class => "delete_upr", :href => "#"}
                    %img{:src => asset_path("cross-hover.png")}        
        = link_to 'Add specific abilities (Not required)', '#', :class => 'btn add_specific_abilities', :id => 'add_specific_abilities_btn'
    .clearfix.user-ability-definitions-box
      %label User ability definitions
      .input
        = select_tag "uad abilities", options_for_select({"Manage" => "manage", "Create" => "create", "Update" => "update"}), :include_blank => true, :id => "uad_ability", :class => "ability chzn-select"
        = select_tag "uad resources", options_for_select({"TestRound" => "TestRound", "TestPlan" => "TestPlan", "TestSuite" => "TestSuite", "AutomationScript" => "AutomationScript", "AutomationCase" => "AutomationCase", "TestCase" => "TestCase", "AutomationScriptResult" => "AutomationScriptResult", "AutomationCaseResult" => "AutomationCaseResult", "Project" => "Project", "ProjectCategory" => "ProjectCategory"}), :include_blank => true, :id => "uad_resource", :class => "user-ability-definitions chzn-select"
        = link_to 'Add', '#', :class => 'btn user-ability-definitions', :id => 'add_uad_btn'
        %table.abilities
          %tr
            %th Ability
            %th
          %tr#hidden_uad
            %td
              To be cloned
            %td
              %a{:class => "delete_uad", :href => "#"}
                %img{:src => asset_path("cross-hover.png")}
          - if @user.user_ability_definitions.nil? or @user.user_ability_definitions.empty?
            %tr.no-tata
              %td{:colspan => 2}
                %h4 No data
          - else
            - @user.user_ability_definitions.each do |uad|
              %tr.data-list
                %td= "Can #{uad.ability} #{uad.resource}"
                %td
                  %a{:class => "delete_uad", :href => "#"}
                    %img{:src => asset_path("cross-hover.png")}
    .actions
      = f.submit 'Save', :class => 'btn primary'
      = link_to 'Cancel', admin_users_path, :class => 'btn'

:javascript
  $(function(){
    $("#new_user").validationEngine({promptPosition : "bottomRight", scroll: false});
    $('.add_specific_abilities').click(function(){
      $('.user-ability-definitions-box').toggle();
      if ($(".user-ability-definitions-box").is(":visible")) {
        $('.add_specific_abilities').addClass("primary").text("Cancel");
      } else {
        $('.add_specific_abilities').removeClass("primary").text("Add specific abilities (Not required)");
      }
    });
    $('#add_uad_btn').click(function(){
      var ability = $('#uad_ability option:selected').text();
      var resource = $('#uad_resource option:selected').text();
      var text = "Can "+ability+" "+resource;
      var uads_current_value = $("#user_user_ability_definitions").val();
      if ($.trim(ability) == "" || $.trim(resource) == ""){
        alert("Please select an ability and an object!");
      }
      else if (uads_current_value.match(text)!=null) {
        alert("User ability definitions already exists!");
      }
      else {
        if ($("table.abilities tbody tr.no-tata").length>0) {
          $("table.abilities tbody tr.no-tata").remove();
        }
        var ele = $("#hidden_uad").clone();
        ele.children("td").first().html(text);
        ele.appendTo("table.abilities tbody").show("slow");
        $("#user_user_ability_definitions").val(uads_current_value+"||"+text);
        ele.children("td").last().children(".delete_uad").bind('click', function(){
          $(this).parent().parent().fadeOut("slow");
          var delete_uad = "||"+$(this).parent().prev().text();
          var new_uads_value = $("#user_user_ability_definitions").val().replace(delete_uad,"");
          $("#user_user_ability_definitions").val(new_uads_value);
        });
      }
    });
    $('.delete_uad').click(function(){
      $(this).parent().parent().fadeOut("slow");
      var delete_uad = "||"+$(this).parent().prev().text();
      var new_uads_value = $("#user_user_ability_definitions").val().replace(delete_uad,"");
      $("#user_user_ability_definitions").val(new_uads_value);
    });
    $('#upr_role').change(function(){
      var role = $('#upr_role option:selected').text();
      if (role == "admin") {
        $('#upr_project').children().first().attr("selected",true);
        $('#upr_project_chzn span').text($('#upr_project').children().first().text());
        $('#upr_project_chzn ul').children().each(function(i) {
          if (i == 0) {
            $(this).toggleClass('result-selected', true);
          } else {
            $(this).toggleClass('result-selected', false);
          }
        });
      }
    });
    $('#add_upr_btn').click(function(){
      var role = $('#upr_role option:selected').text();
      var role_id = $('#upr_role option:selected').val();
      var project = $('#upr_project option:selected').text();
      var project_id = $('#upr_project option:selected').val();
      if (project_id == "") {
        project_id = "0"
      }
      var regex = "," + project_id + "$|," + project_id + "\\|";
      var inserted_upr = "||" + role_id + "," + project_id;
      var upr_current_value = $("#user_projects_roles").val();
      if (upr_current_value.match(regex) != null) {
        alert("User already has a role for the project!");
      } else {
        if ($("table.project_role tbody tr.no_tata").length>0) {
          $("table.project_role tbody tr.no_tada").remove();
        }
        var ele = $("#hidden_upr").clone();
        var first = ele.children("td").first();
        first.html(role);
        first.next().html(project);
        first.next().next().html(inserted_upr);
        ele.appendTo("table.project_role tbody").show("slow");
        $("#user_projects_roles").val(upr_current_value + inserted_upr);
        ele.children("td").last().children(".delete_upr").bind('click', function(){
          $(this).parent().parent().fadeOut("slow");
          var delete_upr = $(this).parent().prev().text();
          var new_upr_value = $("#user_projects_roles").val().replace(delete_upr,"");
          $("#user_projects_roles").val(new_upr_value);
        });
      }
    });
    $('.delete_upr').click(function(){
      $(this).parent().parent().fadeOut("slow");
      var delete_upr = $(this).parent().prev().text();
      var new_upr_value = $("#user_projects_roles").val().replace(delete_upr,"");
      $("#user_projects_roles").val(new_upr_value);
    });    
    $('#add-button').click(function(){
      $('#tcpp-ids').empty();
      $('#tcpps :selected').each(function(idx, elem){
        $('#tcpps-selected').append($(elem));
      });
      $('#tcpps-selected').children().each(function(idx, elem){
        $('#tcpp-ids').append($('#user_oracle_project_ids_').clone().val($(elem).attr('value')));
      });
    });
    $('#remove-button').click(function(){
      $('#tcpp-ids').empty();
      $('#tcpps-selected :selected').each(function(idx, elem){
        $('#tcpps').append($(elem));
      });
      $('#tcpps-selected').children().each(function(idx, elem){
        $('#tcpp-ids').append($('#user_oracle_project_ids_').clone().val($(elem).attr('value')));
      });
    });
    $('#add-all-button').click(function(){
      $('#tcpp-ids').empty();
      $('#tcpps option').each(function(idx, elem){
        $('#tcpps-selected').append($(elem));
        $('#tcpp-ids').append($('#user_oracle_project_ids_').clone().val($(elem).attr('value')));
      });
    });
    $('#clear-all-button').click(function(){
      $('#tcpp-ids').empty();
      $('#tcpps-selected option').each(function(idx, elem){
        $('#tcpps').append($(elem));
      });
    });
  })
